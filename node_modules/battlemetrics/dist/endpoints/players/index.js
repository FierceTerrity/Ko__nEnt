"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Players = void 0;
const qs_1 = __importDefault(require("qs"));
const base_1 = require("../../base");
const resourceName = 'players';
class Players extends base_1.Client {
    getPlayers(filter, params) {
        let query = `${resourceName}?`;
        if (filter) {
            query +=
                qs_1.default.stringify({ filter }, { encode: false, arrayFormat: 'comma' }) + '&';
        }
        if (params) {
            query += qs_1.default.stringify(params, { encode: false, arrayFormat: 'comma' });
        }
        return this.request(query);
    }
    getPlayerById(playerId, filter, params) {
        let query = `${resourceName}/${playerId}?`;
        if (filter) {
            query +=
                qs_1.default.stringify({ filter }, { encode: false, arrayFormat: 'comma' }) + '&';
        }
        if (params) {
            query += qs_1.default.stringify(params, { encode: false, arrayFormat: 'comma' });
        }
        return this.request(query);
    }
    getPlayerTimePlayedById(playerId, serverId, params) {
        let query = `${resourceName}/${playerId}/time-played-history/${serverId}?`;
        query += qs_1.default.stringify(params, { encode: false });
        return this.request(query);
    }
    matchPlayers(identifier, type, params) {
        let query = `${resourceName}/match?`;
        let matchPlayerObj = {
            data: [
                {
                    type: 'identifier',
                    attributes: {
                        type: type,
                        identifier: identifier,
                    },
                },
            ],
        };
        if (params) {
            query += qs_1.default.stringify(params, { encode: false, arrayFormat: 'comma' });
        }
        return this.request(query, {
            method: 'POST',
            data: JSON.stringify(matchPlayerObj),
        });
    }
}
exports.Players = Players;
